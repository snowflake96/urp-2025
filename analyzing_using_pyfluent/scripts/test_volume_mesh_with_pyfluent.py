#!/usr/bin/env python3
"""
Test Volume Mesh with PyFluent
Author: Jiwoo Lee

This script tests importing and working with the generated volume mesh (.msh)
in PyFluent to verify the STL ‚Üí Volume Mesh ‚Üí PyFluent workflow is functional.
"""

import ansys.fluent.core as pyfluent
import os
import sys

def test_volume_mesh_import():
    """Test importing volume mesh into PyFluent"""
    
    # File paths
    mesh_file = "../meshes/78_MRA1_seg_aneurysm_volume.msh"
    
    # Check if mesh file exists
    if not os.path.exists(mesh_file):
        print(f"‚ùå Mesh file not found: {mesh_file}")
        return False
    
    print("=== Testing Volume Mesh with PyFluent ===")
    print(f"Mesh file: {mesh_file}")
    
    try:
        # Launch PyFluent in solver mode
        print("üöÄ Launching PyFluent solver...")
        session = pyfluent.launch_fluent(
            precision='double',
            processor_count=2,
            mode='solver',
            show_gui=False,
            version='3d'
        )
        
        print("‚úÖ PyFluent solver launched successfully!")
        
        # Import the volume mesh
        print(f"üì• Importing volume mesh: {mesh_file}")
        
        # Use absolute path
        abs_mesh_file = os.path.abspath(mesh_file)
        print(f"Absolute path: {abs_mesh_file}")
        
        # Import mesh using new API
        session.file.read_mesh(file_name=abs_mesh_file)
        
        print("‚úÖ Volume mesh imported successfully!")
        
        # Get mesh information
        print("\n=== Mesh Information ===")
        
        # Check mesh using TUI commands
        mesh_info = session.tui.mesh.check()
        print("‚úÖ Mesh check completed")
        
        # Get mesh statistics
        domain_info = session.tui.domain.info()
        
        # Try to get cell count
        try:
            # Get mesh info through TUI
            cell_info = session.tui.mesh.info()
            print("‚úÖ Got mesh info")
        except Exception as e:
            print(f"‚ö†Ô∏è  Could not get detailed mesh info: {e}")
        
        # Set up basic fluid properties
        print("\n=== Setting up Physics ===")
        
        # Enable viscous flow
        session.setup.models.viscous.model = "k-epsilon-standard"
        print("‚úÖ Set turbulence model: k-epsilon")
        
        # Set material properties (blood-like properties)
        session.setup.materials.fluid["air"].density.value = 1060  # kg/m¬≥ (blood density)
        session.setup.materials.fluid["air"].viscosity.value = 0.004  # Pa¬∑s (blood viscosity)
        print("‚úÖ Set blood-like material properties")
        
        # Get boundary conditions info
        print("\n=== Boundary Conditions ===")
        bc_info = session.setup.boundary_conditions.get_zone_names()
        print(f"Available boundary zones: {bc_info}")
        
        print("\nüéâ SUCCESS: Volume mesh workflow is fully functional!")
        print("Key achievements:")
        print("  ‚úÖ STL successfully converted to volume mesh")
        print("  ‚úÖ Volume mesh imported into PyFluent without errors")
        print("  ‚úÖ Mesh check passed")
        print("  ‚úÖ Physics models can be configured")
        print("  ‚úÖ Boundary conditions are available")
        print("\nüöÄ Ready for full CFD simulation!")
        
        # Clean up
        session.exit()
        return True
        
    except Exception as e:
        print(f"‚ùå Error during testing: {str(e)}")
        return False

def test_mesh_format_detection():
    """Test what mesh formats PyFluent can detect"""
    
    print("\n=== Mesh Format Detection ===")
    mesh_file = "../meshes/78_MRA1_seg_aneurysm_volume.msh"
    
    # Check file header
    with open(mesh_file, 'r') as f:
        header = f.read(200)
        print(f"Mesh file header: {header[:100]}...")
    
    # Check file size
    size_bytes = os.path.getsize(mesh_file)
    size_mb = size_bytes / (1024 * 1024)
    print(f"Mesh file size: {size_mb:.2f} MB ({size_bytes:,} bytes)")

def main():
    """Main test function"""
    
    print("üî¨ VOLUME MESH TESTING WITH PYFLUENT")
    print("=" * 50)
    
    # Test mesh format detection
    test_mesh_format_detection()
    
    # Test volume mesh import
    success = test_volume_mesh_import()
    
    if success:
        print("\n‚úÖ ALL TESTS PASSED!")
        print("The STL ‚Üí Volume Mesh ‚Üí PyFluent workflow is complete and functional.")
        return 0
    else:
        print("\n‚ùå TESTS FAILED!")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 